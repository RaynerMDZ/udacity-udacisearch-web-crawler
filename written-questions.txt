Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    Answer: The parser takes more time when run with ParallelWebCrawler because the parser is a CPU-bound task.
    So, the profiler adds up the time spent in the parser for all the threads. This is why the parser takes more time
    when run with ParallelWebCrawler.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

    Answer:
    (a) The sequential web crawler was able to read more web pages than the parallel crawler because the cpu only has one core in this scenario.

    (b) The parallel web crawler will almost certainly perform better than the sequential crawler when the cpu has more than one core.
    This is because the parallel web crawler can use multiple cores to read multiple web pages simultaneously.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
    Answer: The cross-cutting concern being addressed by the com.udacity.webcrawler.profiler.Profiler class is the profiling of the web crawler.

    (b) What are the join points of the Profiler in the web crawler program?
    Answer: The join points of the Profiler in the web crawler program are the methods in the SequentialWebCrawler and ParallelWebCrawler classes.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    Builder pattern: The CrawlerConfiguration, CrawlResult, ParserModule classes and PageParser interface uses the Builder method.
    I liked that the Builder pattern is easy to understand and use. I disliked that the Builder pattern is not thread-safe.

    Proxy pattern: The ProfileImpl class uses the Proxy pattern.
    I liked that the proxy pattern makes it more convenient to work with reflection. I disliked that the proxy pattern is too complicated to implement and understand.

    Dependency Injection pattern: The WebCrawlerMain class uses the Dependency Injection pattern with the Guice library.
    I liked that the Dependency Injection pattern makes it easy to inject dependencies and makes code more modular for testing.
    I disliked that the Dependency Injection pattern add more complexity and makes the code harder to understand.